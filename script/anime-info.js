// –û—Ç—Ä–∏–º—É—î–º–æ ID –∞–Ω—ñ–º–µ –∑ URL
    const params = new URLSearchParams(window.location.search);
    const animeId = params.get("id");
    
    // –ï–ª–µ–º–µ–Ω—Ç–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å—Ç–∞–Ω–æ–º –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    const loadingOverlay = document.getElementById('loading-overlay');
    const contentWrapper = document.getElementById('content-wrapper');
    
    // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    loadingOverlay.classList.remove('hidden');
    contentWrapper.classList.remove('loaded');
    
    if (!animeId) {
      showError("–ê–Ω—ñ–º–µ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üòø", "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ID –∞–Ω—ñ–º–µ –∑ URL.");
    } else {
      loadAnime(animeId);
    }

    async function loadAnime(id) {
      try {
        console.log("–ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –∞–Ω—ñ–º–µ –∑ ID:", id);
        const response = await fetch(`anime/${encodeURIComponent(id)}.json`);
        console.log("–°—Ç–∞—Ç—É—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:", response.status);
        
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const anime = await response.json();
        console.log("–ê–Ω—ñ–º–µ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ:", anime.title);
        
        // –•–æ–≤–∞—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –ø–æ–∫–∞–∑—É—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç
        setTimeout(() => {
          loadingOverlay.classList.add('hidden');
          contentWrapper.classList.add('loaded');
          displayAnimeInfo(anime);
        }, 500);
        
      } catch (error) {
        console.error("–î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏:", error);
        showError("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∞–Ω—ñ–º–µ üòø", error.message);
      }
    }

    function showError(title, message) {
      document.body.innerHTML = `
        <div class="error-message">
          <h2>${title}</h2>
          <p>${message}</p>
          <a href="https://kilgamer-steam.github.io/Astro-Neko" class="back-button">–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞ –≥–æ–ª–æ–≤–Ω—É</a>
        </div>
      `;
    }

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ
    function formatDuration(seconds) {
      const hours = Math.floor(seconds / 3600);
      const minutes = Math.floor((seconds % 3600) / 60);
      
      if (hours > 0) {
        return `${hours} –≥–æ–¥ ${minutes} —Ö–≤`;
      } else {
        return `${minutes} —Ö–≤`;
      }
    }

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏
    function formatDate(dateString) {
      const date = new Date(dateString);
      return date.toLocaleDateString('uk-UA', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });
    }

    function displayAnimeInfo(anime) {
      document.title = `${anime.title} ‚Äî AstroNeko`;
      document.getElementById("anime-bg").style.backgroundImage = `url('${anime.background}')`;
      document.getElementById("anime-image").src = anime.img;
      document.getElementById("anime-title").textContent = anime.title;
      document.getElementById("anime-description").textContent = anime.description;
      document.getElementById("anime-tags").textContent = anime.tags.join(", ");
      document.getElementById("anime-status").textContent = anime.status;
      document.getElementById("anime-age").textContent = anime.age;
      document.getElementById("anime-rating").textContent = anime.rating || "N/A";

      const seasonList = document.getElementById("season-list");
      seasonList.innerHTML = "";

      // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–µ–∑–æ–Ω—ñ–≤
      anime.seasons.forEach(season => {
        const seasonDiv = document.createElement("div");
        seasonDiv.classList.add("season");

        const seasonTitle = document.createElement("h4");
        const seasonName = season.title && season.title.trim() !== "" ? `: "${season.title}"` : "";
        seasonTitle.textContent = `–°–µ–∑–æ–Ω ${season.seasonNumber}${seasonName}`;
        seasonDiv.appendChild(seasonTitle);

        // –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ä—ñ–∫ —Ç–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–µ—Ä—ñ–π
        const seasonMeta = document.createElement("div");
        seasonMeta.classList.add("season-meta");
        seasonMeta.innerHTML = `
          <span class="season-year">${season.year} —Ä—ñ–∫</span>
          <span class="season-episodes">${season.episodeCount} —Å–µ—Ä—ñ–π</span>
        `;
        seasonDiv.appendChild(seasonMeta);

        const episodeContainer = document.createElement("div");
        episodeContainer.classList.add("episode-container");

        season.episodes.forEach((ep, idx) => {
          const btn = document.createElement("button");
          btn.classList.add("episode-btn");
          btn.textContent = ep.title || `–°–µ—Ä—ñ—è ${idx + 1}`;
          btn.onclick = () => {
            const url = `player.html?id=${encodeURIComponent(anime.id)}&season=${season.seasonNumber}&episode=${idx+1}`;
            window.location.href = url;
          };
          episodeContainer.appendChild(btn);
        });

        seasonDiv.appendChild(episodeContainer);
        seasonList.appendChild(seasonDiv);
      });

      // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ñ—ñ–ª—å–º—ñ–≤
      if (anime.movies && anime.movies.length > 0) {
        const moviesBlock = document.createElement("div");
        moviesBlock.classList.add("movies-block");

        const moviesTitle = document.createElement("h4");
        moviesTitle.textContent = "–§—ñ–ª—å–º–∏";
        moviesBlock.appendChild(moviesTitle);

        // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é –¥–ª—è —Ñ—ñ–ª—å–º—ñ–≤
        const moviesTable = document.createElement("table");
        moviesTable.classList.add("movies-table");
        
        // –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ñ
        const tableHeader = document.createElement("tr");
        tableHeader.innerHTML = `
          <th class="num-tab">‚Ññ</th>
          <th class="name-tab">–ù–∞–∑–≤–∞ —Ñ—ñ–ª—å–º—É</th>
          <th class="data-tab">–î–∞—Ç–∞ —Ä–µ–ª—ñ–∑—É</th>
          <th class="time-tab">–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å</th>
          <th class="button-tab"></th>
        `;
        moviesTable.appendChild(tableHeader);

        // –ó–∞–ø–æ–≤–Ω—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é –¥–∞–Ω–∏–º–∏
        anime.movies.forEach((movie, idx) => {
          const row = document.createElement("tr");
          row.classList.add("movie-row");
          
          // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Å–µ–∫—É–Ω–¥–∏ –≤ —á–∏—Ç–∞–±–µ–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç
          const duration = formatDuration(movie.duration);
          
          row.innerHTML = `
            <td class="movie-number">${movie.movieNumber}</td>
            <td class="movie-title">${movie.name}</td>
            <td class="movie-date">${formatDate(movie.releaseDate)}</td>
            <td class="movie-duration">${duration}</td>
            <td class="movie-action">
              <button class="watch-movie-btn" data-movie="${idx + 1}">–î–∏–≤–∏—Ç–∏—Å—è</button>
            </td>
          `;
          
          // –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–∏–≤–∏—Ç–∏—Å—è"
          const watchBtn = row.querySelector('.watch-movie-btn');
          watchBtn.onclick = () => {
            const url = `player.html?id=${encodeURIComponent(anime.id)}&movie=${idx + 1}`;
            window.location.href = url;
          };
          
          moviesTable.appendChild(row);
        });

        moviesBlock.appendChild(moviesTable);
        seasonList.appendChild(moviesBlock);
      }
      
      // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –¥—ñ–π
      setupActionButtons(anime);
    }
    
    function setupActionButtons(anime) {
    const bookmarkBtn = document.getElementById('bookmark-btn');
    const rateBtn = document.getElementById('rate-btn');
    const shareBtn = document.getElementById('share-btn');
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∞–Ω—ñ–º–µ –≤–∂–µ –≤ –∑–∞–∫–ª–∞–¥–∫–∞—Ö
    const bookmarks = JSON.parse(localStorage.getItem('animeBookmarks') || '[]');
    const isBookmarked = bookmarks.some(item => item.id === anime.id);
    
    if (isBookmarked) {
        bookmarkBtn.classList.add('active');
        bookmarkBtn.innerHTML = '<span>‚òÖ</span> –í –∑–∞–∫–ª–∞–¥–∫–∞—Ö';
    }
    
    // –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∑–∞–∫–ª–∞–¥–æ–∫
    bookmarkBtn.addEventListener('click', () => {
        let bookmarks = JSON.parse(localStorage.getItem('animeBookmarks') || '[]');
        const existingIndex = bookmarks.findIndex(item => item.id === anime.id);
        
        if (existingIndex >= 0) {
            // –í–∏–¥–∞–ª—è—î–º–æ –∑ –∑–∞–∫–ª–∞–¥–æ–∫
            bookmarks.splice(existingIndex, 1);
            bookmarkBtn.classList.remove('active');
            bookmarkBtn.innerHTML = '<span>‚òÖ</span> –í –∑–∞–∫–ª–∞–¥–∫–∏';
        } else {
            // –î–æ–¥–∞—î–º–æ –≤ –∑–∞–∫–ª–∞–¥–∫–∏
            bookmarks.push({
                id: anime.id,
                title: anime.title,
                img: anime.img,
                added: new Date().toISOString()
            });
            bookmarkBtn.classList.add('active');
            bookmarkBtn.innerHTML = '<span>‚òÖ</span> –í –∑–∞–∫–ª–∞–¥–∫–∞—Ö';
        }
        
        localStorage.setItem('animeBookmarks', JSON.stringify(bookmarks));
    });
    
    // –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ü—ñ–Ω–∫–∏ - —Ç–µ–ø–µ—Ä –≤—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
    rateBtn.addEventListener('click', () => {
        showRatingModal(anime);
    });
    
    // –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è
    shareBtn.addEventListener('click', () => {
        // –û–±—Ä—ñ–∑–∞—î–º–æ –Ω–∞–∑–≤—É –∞–Ω—ñ–º–µ —è–∫—â–æ –≤–æ–Ω–∞ –¥–æ–≤—à–∞ –∑–∞ 4 —Å–ª–æ–≤–∞
        let titleToShare = anime.title;
        const words = anime.title.split(' ');
        if (words.length > 4) {
            titleToShare = words.slice(0, 4).join(' ') + '...';
        }
        
        // –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è
        const shareText = `–ü—Ä–∏—î–¥–Ω—É–π—Å—è –¥–æ Astro –ø–µ—Ä–µ–≥–ª—è–¥—É –∞–Ω—ñ–º–µ "${titleToShare}" —Ä–∞–∑–æ–º –∑—ñ –º–Ω–æ—é!\n${window.location.href}`;
        
        // –ö–æ–ø—ñ—é—î–º–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É
        navigator.clipboard.writeText(shareText).then(() => {
            // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
            showTempMessage('–ü–æ—Å–∏–ª–∞–Ω–Ω—è —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É! üìã');
        }).catch(err => {
            // –†–µ–∑–µ—Ä–≤–Ω–∏–π —Å–ø–æ—Å—ñ–± –¥–ª—è —Å—Ç–∞—Ä–∏—Ö –±—Ä–∞—É–∑–µ—Ä—ñ–≤
            console.error('–ü–æ–º–∏–ª–∫–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è: ', err);
            fallbackCopyToClipboard(shareText);
        });
    });
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ —Ä–µ–π—Ç–∏–Ω–≥—É
function showRatingModal(anime) {
    // –°—Ç–≤–æ—Ä—é—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
    const modalHTML = `
        <div class="rating-modal" id="rating-modal">
            <div class="rating-content">
                <h3 class="rating-title">–û—Ü—ñ–Ω–∏—Ç–∏ "${anime.title}"</h3>
                <div class="rating-stars" id="rating-stars">
                    <div class="rating-star" data-value="1">‚òÜ</div>
                    <div class="rating-star" data-value="2">‚òÜ</div>
                    <div class="rating-star" data-value="3">‚òÜ</div>
                    <div class="rating-star" data-value="4">‚òÜ</div>
                    <div class="rating-star" data-value="5">‚òÜ</div>
                    <div class="rating-star" data-value="6">‚òÜ</div>
                    <div class="rating-star" data-value="7">‚òÜ</div>
                    <div class="rating-star" data-value="8">‚òÜ</div>
                    <div class="rating-star" data-value="9">‚òÜ</div>
                    <div class="rating-star" data-value="10">‚òÜ</div>
                </div>
                <div class="rating-value" id="rating-value">–û–±–µ—Ä—ñ—Ç—å –æ—Ü—ñ–Ω–∫—É (1-10)</div>
                <div class="rating-buttons">
                    <button class="rating-cancel" id="rating-cancel">–°–∫–∞—Å—É–≤–∞—Ç–∏</button>
                    <button class="rating-submit" id="rating-submit" disabled>–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏</button>
                </div>
            </div>
        </div>
    `;
    
    // –î–æ–¥–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –¥–æ body
    document.body.insertAdjacentHTML('beforeend', modalHTML);
    
    const modal = document.getElementById('rating-modal');
    const stars = document.querySelectorAll('.rating-star');
    const ratingValue = document.getElementById('rating-value');
    const cancelBtn = document.getElementById('rating-cancel');
    const submitBtn = document.getElementById('rating-submit');
    
    let currentRating = 0;
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –≤–∂–µ –æ—Ü—ñ–Ω–∫–∞ –¥–ª—è —Ü—å–æ–≥–æ –∞–Ω—ñ–º–µ
    const ratings = JSON.parse(localStorage.getItem('animeRatings') || '{}');
    if (ratings[anime.id]) {
        currentRating = ratings[anime.id].rating;
        updateStars(currentRating);
        updateRatingValue(currentRating);
        submitBtn.disabled = false;
    }
    
    // –ü–æ–∫–∞–∑—É—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
    modal.style.display = 'flex';
    
    // –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –∑—ñ—Ä–æ—á–æ–∫
    stars.forEach(star => {
        star.addEventListener('click', () => {
            const value = parseInt(star.getAttribute('data-value'));
            currentRating = value;
            updateStars(value);
            updateRatingValue(value);
            submitBtn.disabled = false;
        });
        
        star.addEventListener('mouseenter', () => {
            const value = parseInt(star.getAttribute('data-value'));
            updateStars(value, true);
        });
        
        star.addEventListener('mouseleave', () => {
            updateStars(currentRating);
        });
    });
    
    // –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
    cancelBtn.addEventListener('click', () => {
        modal.remove();
    });
    
    // –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    submitBtn.addEventListener('click', () => {
        if (currentRating > 0) {
            saveRating(anime.id, currentRating);
            modal.remove();
            showTempMessage(`–î—è–∫—É—î–º–æ –∑–∞ –æ—Ü—ñ–Ω–∫—É: ${currentRating}/10! ‚≠ê`);
        }
    });
    
    // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –ø—Ä–∏ –∫–ª—ñ–∫—É –Ω–∞ —Ñ–æ–Ω
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            modal.remove();
        }
    });
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑—ñ—Ä–æ—á–æ–∫
function updateStars(rating, isHover = false) {
    const stars = document.querySelectorAll('.rating-star');
    
    stars.forEach((star, index) => {
        const starValue = index + 1;
        
        // –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –∫–ª–∞—Å–∏
        star.classList.remove('active', 'half', 'animated');
        
        if (starValue <= rating) {
            star.classList.add('active');
            star.textContent = '‚òÖ';
            
            // –î–æ–¥–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Ä–µ–π—Ç–∏–Ω–≥—É (–Ω–µ –ø—Ä–∏ —Ö–æ–≤–µ—Ä—ñ)
            if (!isHover) {
                star.classList.add('animated');
            }
        } else {
            star.textContent = '‚òÜ';
        }
    });
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –æ—Ü—ñ–Ω–∫–∏
function updateRatingValue(rating) {
    const ratingValue = document.getElementById('rating-value');
    if (rating > 0) {
        ratingValue.textContent = `–í–∞—à–∞ –æ—Ü—ñ–Ω–∫–∞: ${rating}/10`;
        ratingValue.style.color = '#ff69b4';
    } else {
        ratingValue.textContent = '–û–±–µ—Ä—ñ—Ç—å –æ—Ü—ñ–Ω–∫—É (1-10)';
        ratingValue.style.color = '#cc6096ff';
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –æ—Ü—ñ–Ω–∫–∏
function saveRating(animeId, rating) {
    let ratings = JSON.parse(localStorage.getItem('animeRatings') || '{}');
    ratings[animeId] = {
        rating: rating,
        date: new Date().toISOString()
    };
    localStorage.setItem('animeRatings', JSON.stringify(ratings));
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É —Ç–∏–º—á–∞—Å–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
function showTempMessage(message) {
    // –°—Ç–≤–æ—Ä—é—î–º–æ –µ–ª–µ–º–µ–Ω—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    const messageEl = document.createElement('div');
    messageEl.textContent = message;
    messageEl.style.cssText = `
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: rgba(148, 58, 103, 0.9);
        color: white;
        padding: 15px 25px;
        border-radius: 10px;
        z-index: 10000;
        font-family: "Poppins", sans-serif;
        font-size: 14px;
        backdrop-filter: blur(10px);
        border: 2px solid #ff69b4;
        box-shadow: 0 5px 20px rgba(255, 105, 180, 0.3);
        opacity: 0;
        transition: opacity 0.5s ease;
    `;
    
    document.body.appendChild(messageEl);
    
    // –ê–Ω—ñ–º–∞—Ü—ñ—è –ø–æ—è–≤–∏ - –ø–ª–∞–≤–Ω–æ –∑'—è–≤–ª—è—î—Ç—å—Å—è –∑–∞ 0.5 —Å–µ–∫—É–Ω–¥–∏
    setTimeout(() => {
        messageEl.style.opacity = '1';
    }, 10);
    
    // –ê–Ω—ñ–º–∞—Ü—ñ—è –∑–Ω–∏–∫–Ω–µ–Ω–Ω—è - –ø–ª–∞–≤–Ω–æ –∑–Ω–∏–∫–∞—î —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥–∏
    setTimeout(() => {
        messageEl.style.opacity = '0';
        
        // –í–∏–¥–∞–ª—è—î–º–æ –µ–ª–µ–º–µ–Ω—Ç –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∞–Ω—ñ–º–∞—Ü—ñ—ó
        setTimeout(() => {
            if (document.body.contains(messageEl)) {
                document.body.removeChild(messageEl);
            }
        }, 500);
    }, 2000);
}

// –†–µ–∑–µ—Ä–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –¥–ª—è —Å—Ç–∞—Ä–∏—Ö –±—Ä–∞—É–∑–µ—Ä—ñ–≤
function fallbackCopyToClipboard(text) {
    const textArea = document.createElement("textarea");
    textArea.value = text;
    textArea.style.cssText = `
        position: fixed;
        left: -9999px;
        opacity: 0;
    `;
    document.body.appendChild(textArea);
    textArea.focus();
    textArea.select();
    
    try {
        const successful = document.execCommand('copy');
        document.body.removeChild(textArea);
        
        if (successful) {
            showTempMessage('–ü–æ—Å–∏–ª–∞–Ω–Ω—è —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É! üìã');
        } else {
            showTempMessage('–ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
        }
    } catch (err) {
        document.body.removeChild(textArea);
        showTempMessage('–ü–æ–º–∏–ª–∫–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è. –°–∫–æ–ø—ñ—é–π—Ç–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤—Ä—É—á–Ω—É.');
    }
}

// –†–µ–∑–µ—Ä–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –¥–ª—è —Å—Ç–∞—Ä–∏—Ö –±—Ä–∞—É–∑–µ—Ä—ñ–≤
function fallbackCopyToClipboard(text) {
  const textArea = document.createElement("textarea");
  textArea.value = text;
  textArea.style.cssText = `
    position: fixed;
    left: -9999px;
    opacity: 0;
  `;
  document.body.appendChild(textArea);
  textArea.focus();
  textArea.select();
  
  try {
    const successful = document.execCommand('copy');
    document.body.removeChild(textArea);
    
    if (successful) {
      showTempMessage('–ü–æ—Å–∏–ª–∞–Ω–Ω—è —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É! üìã');
    } else {
      showTempMessage('–ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
    }
  } catch (err) {
    document.body.removeChild(textArea);
    showTempMessage('–ü–æ–º–∏–ª–∫–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è. –°–∫–æ–ø—ñ—é–π—Ç–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤—Ä—É—á–Ω—É.');
  }
}
    }

    // Auto-hide header functionality
    let lastScrollY = window.scrollY;
    const header = document.querySelector('header');
    const headerHeight = header.offsetHeight;

    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤—ñ–¥—Å—Ç—É–ø –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç—É
    document.querySelector('.content-wrapper').style.paddingTop = headerHeight + 'px';

    window.addEventListener('scroll', () => {
      const currentScrollY = window.scrollY;
      
      if (currentScrollY > lastScrollY && currentScrollY > headerHeight) {
        // –°–∫—Ä–æ–ª–∏–º–æ –≤–Ω–∏–∑ - —Ö–æ–≤–∞—î–º–æ —Ö–µ–¥–µ—Ä
        header.classList.add('hidden');
      } else {
        // –°–∫—Ä–æ–ª–∏–º–æ –≤–≥–æ—Ä—É - –ø–æ–∫–∞–∑—É—î–º–æ —Ö–µ–¥–µ—Ä
        header.classList.remove('hidden');
      }
      
      lastScrollY = currentScrollY;
    });

    // –î–æ–¥–∞—Ç–∫–æ–≤–æ: –ø–æ–∫–∞–∑—É—î–º–æ —Ö–µ–¥–µ—Ä –ø—Ä–∏ —Ö–æ–≤–µ—Ä—ñ
    header.addEventListener('mouseenter', () => {
      header.classList.remove('hidden');
    });

    // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ –º–∏—Ç—Ç—î–≤–æ–º—É —Ö–æ–≤–∞–Ω–Ω—é –ø—Ä–∏ –≤–∏—Ö–æ–¥—ñ –∫—É—Ä—Å–æ—Ä–∞
    header.addEventListener('mouseleave', () => {
      lastScrollY = window.scrollY;
    });