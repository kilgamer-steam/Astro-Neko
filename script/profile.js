// Auto-hide header functionality
document.addEventListener('DOMContentLoaded', function() {
    let lastScrollY = window.scrollY;
    const header = document.querySelector('header');
    const headerHeight = header.offsetHeight;

    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤—ñ–¥—Å—Ç—É–ø –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç—É
    const mainContent = document.querySelector('main');
    if (mainContent) {
        mainContent.style.paddingTop = headerHeight + 'px';
    }

    window.addEventListener('scroll', () => {
        const currentScrollY = window.scrollY;
        
        if (currentScrollY > lastScrollY && currentScrollY > headerHeight) {
            // –°–∫—Ä–æ–ª–∏–º–æ –≤–Ω–∏–∑ - —Ö–æ–≤–∞—î–º–æ —Ö–µ–¥–µ—Ä
            header.classList.add('hidden');
        } else {
            // –°–∫—Ä–æ–ª–∏–º–æ –≤–≥–æ—Ä—É - –ø–æ–∫–∞–∑—É—î–º–æ —Ö–µ–¥–µ—Ä
            header.classList.remove('hidden');
        }
        
        lastScrollY = currentScrollY;
    });

    // –î–æ–¥–∞—Ç–∫–æ–≤–æ: –ø–æ–∫–∞–∑—É—î–º–æ —Ö–µ–¥–µ—Ä –ø—Ä–∏ —Ö–æ–≤–µ—Ä—ñ
    header.addEventListener('mouseenter', () => {
        header.classList.remove('hidden');
    });

    // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ –º–∏—Ç—Ç—î–≤–æ–º—É —Ö–æ–≤–∞–Ω–Ω—é –ø—Ä–∏ –≤–∏—Ö–æ–¥—ñ –∫—É—Ä—Å–æ—Ä–∞
    header.addEventListener('mouseleave', () => {
        lastScrollY = window.scrollY;
    });

    // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ—Ñ—ñ–ª—é
    updateProfileStats();

    // –ü–ª–∞–≤–Ω–∞ –∞–Ω—ñ–º–∞—Ü—ñ—è –ø–æ—è–≤–∏ –∫–æ–Ω—Ç–µ–Ω—Ç—É –ø—Ä–æ—Ñ—ñ–ª—é
    setTimeout(() => {
        const profileContainer = document.querySelector('.profile-container');
        if (profileContainer) {
            profileContainer.style.opacity = '1';
            profileContainer.style.transform = 'translateY(0)';
        }
    }, 100);

    // –î–µ–º–æ-—Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –¥–ª—è –ø–æ–∫–∞–∑—É –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π
    document.querySelector('.profile-avatar').addEventListener('click', function() {
        showTempMessage('üé≠ –î–µ–º–æ-—Ä–µ–∂–∏–º\n\n–£ –ø–æ–≤–Ω–æ—Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ–π –≤–µ—Ä—Å—ñ—ó —Ç—É—Ç –±—É–¥–µ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –∑–º—ñ–Ω–∏—Ç–∏ –∞–≤–∞—Ç–∞—Ä —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é!');
    });
});

// –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
let allBookmarks = [];
let allRatings = {};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—Å—ñ—î—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ—Ñ—ñ–ª—é
async function updateProfileStats() {
    // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ localStorage
    allBookmarks = JSON.parse(localStorage.getItem('animeBookmarks') || '[]');
    allRatings = JSON.parse(localStorage.getItem('animeRatings') || '{}');
    
    // –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ—Ü—ñ–Ω–æ–∫
    const ratingsCount = Object.keys(allRatings).length;
    
    // –û–Ω–æ–≤–ª—é—î–º–æ —á–∏—Å–ª–∞ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏—Ü—ñ
    const bookmarkCountElement = document.querySelector('.stat-item:nth-child(1) .stat-number');
    const ratingCountElement = document.querySelector('.stat-item:nth-child(2) .stat-number');
    const watchedCountElement = document.querySelector('.stat-item:nth-child(3) .stat-number');
    
    if (bookmarkCountElement) {
        bookmarkCountElement.textContent = allBookmarks.length;
    }
    
    if (ratingCountElement) {
        ratingCountElement.textContent = ratingsCount;
    }
    
    if (watchedCountElement) {
        // –í–ò–ú–ö–ù–ï–ù–û: –Ω–µ —Ä–∞—Ö—É—î–º–æ –æ—Ü—ñ–Ω–∫–∏ —è–∫ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç—ñ
        watchedCountElement.textContent = '0';
    }
    
    // –û–Ω–æ–≤–ª—é—î–º–æ –≤–º—ñ—Å—Ç —Å–µ–∫—Ü—ñ–π –∑ –¥–∞–Ω–∏–º–∏
    await updateBookmarksPreview();
    await updateRatingsPreview();
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–µ–≤—å—é –∑–∞–∫–ª–∞–¥–æ–∫
async function updateBookmarksPreview() {
    const bookmarksContainer = document.querySelector('.profile-section:nth-child(1)');
    const emptyState = bookmarksContainer.querySelector('.empty-state');
    
    if (!bookmarksContainer) return;
    
    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø—Ä–µ–≤—å—é
    let previewContainer = bookmarksContainer.querySelector('.profile-preview');
    if (!previewContainer) {
        previewContainer = document.createElement('div');
        previewContainer.classList.add('profile-preview');
        bookmarksContainer.appendChild(previewContainer);
    }
    
    // –û—á–∏—â–∞—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    previewContainer.innerHTML = '';
    
    if (allBookmarks.length === 0) {
        // –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞–Ω "–ø—É—Å—Ç–æ"
        if (emptyState) {
            emptyState.style.display = 'block';
        }
        return;
    }
    
    // –•–æ–≤–∞—î–º–æ —Å—Ç–∞–Ω "–ø—É—Å—Ç–æ"
    if (emptyState) {
        emptyState.style.display = 'none';
    }
    
    // –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à—ñ 3 –∑–∞–∫–ª–∞–¥–∫–∏
    const previewBookmarks = allBookmarks.slice(0, 3);
    
    // –î–æ–¥–∞—î–º–æ –ø—Ä–µ–≤—å—é –∑–∞–∫–ª–∞–¥–æ–∫
    for (const bookmark of previewBookmarks) {
        try {
            // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–≤–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∞–Ω—ñ–º–µ
            const animeInfo = await loadAnimeInfo(bookmark.id);
            const previewItem = createBookmarkPreviewItem(bookmark, animeInfo);
            previewContainer.appendChild(previewItem);
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∞–Ω—ñ–º–µ:', error);
            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±–∞–∑–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑ –∑–∞–∫–ª–∞–¥–∫–∏
            const previewItem = createBookmarkPreviewItem(bookmark, null);
            previewContainer.appendChild(previewItem);
        }
    }
    
    // –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ" —è–∫—â–æ –∑–∞–∫–ª–∞–¥–æ–∫ –±—ñ–ª—å—à–µ 3
    if (allBookmarks.length > 3) {
        const moreButton = document.createElement('div');
        moreButton.classList.add('preview-more');
        moreButton.innerHTML = `
            <div class="preview-more-text">–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –∑–∞–∫–ª–∞–¥–∫–∏</div>
            <div class="preview-more-count">+${allBookmarks.length - 3} —â–µ</div>
        `;
        moreButton.addEventListener('click', (e) => {
            e.stopPropagation();
            showBookmarksModal();
        });
        previewContainer.appendChild(moreButton);
    }
    
    // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫—É –Ω–∞ –≤—Å—é —Å–µ–∫—Ü—ñ—é
    bookmarksContainer.addEventListener('click', (e) => {
        if (!e.target.closest('.preview-more') && !e.target.closest('.preview-item') && allBookmarks.length > 0) {
            showBookmarksModal();
        }
    });
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–µ–≤—å—é –æ—Ü—ñ–Ω–æ–∫
async function updateRatingsPreview() {
    const ratingsContainer = document.querySelector('.profile-section:nth-child(2)');
    const emptyState = ratingsContainer.querySelector('.empty-state');
    
    if (!ratingsContainer) return;
    
    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø—Ä–µ–≤—å—é
    let previewContainer = ratingsContainer.querySelector('.profile-preview');
    if (!previewContainer) {
        previewContainer = document.createElement('div');
        previewContainer.classList.add('profile-preview');
        ratingsContainer.appendChild(previewContainer);
    }
    
    // –û—á–∏—â–∞—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    previewContainer.innerHTML = '';
    
    if (Object.keys(allRatings).length === 0) {
        // –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞–Ω "–ø—É—Å—Ç–æ"
        if (emptyState) {
            emptyState.style.display = 'block';
        }
        return;
    }
    
    // –•–æ–≤–∞—î–º–æ —Å—Ç–∞–Ω "–ø—É—Å—Ç–æ"
    if (emptyState) {
        emptyState.style.display = 'none';
    }
    
    // –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à—ñ 3 –æ—Ü—ñ–Ω–∫–∏
    const previewRatings = Object.entries(allRatings).slice(0, 3);
    
    // –î–æ–¥–∞—î–º–æ –ø—Ä–µ–≤—å—é –æ—Ü—ñ–Ω–æ–∫
    for (const [animeId, ratingData] of previewRatings) {
        try {
            // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–≤–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∞–Ω—ñ–º–µ
            const animeInfo = await loadAnimeInfo(animeId);
            const previewItem = createRatingPreviewItem(animeId, ratingData, animeInfo);
            previewContainer.appendChild(previewItem);
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∞–Ω—ñ–º–µ:', error);
            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±–∞–∑–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
            const previewItem = createRatingPreviewItem(animeId, ratingData, null);
            previewContainer.appendChild(previewItem);
        }
    }
    
    // –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ" —è–∫—â–æ –æ—Ü—ñ–Ω–æ–∫ –±—ñ–ª—å—à–µ 3
    if (Object.keys(allRatings).length > 3) {
        const moreButton = document.createElement('div');
        moreButton.classList.add('preview-more');
        moreButton.innerHTML = `
            <div class="preview-more-text">–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –æ—Ü—ñ–Ω–∫–∏</div>
            <div class="preview-more-count">+${Object.keys(allRatings).length - 3} —â–µ</div>
        `;
        moreButton.addEventListener('click', (e) => {
            e.stopPropagation();
            showRatingsModal();
        });
        previewContainer.appendChild(moreButton);
    }
    
    // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫—É –Ω–∞ –≤—Å—é —Å–µ–∫—Ü—ñ—é
    ratingsContainer.addEventListener('click', (e) => {
        if (!e.target.closest('.preview-more') && !e.target.closest('.preview-item') && Object.keys(allRatings).length > 0) {
            showRatingsModal();
        }
    });
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞ –ø—Ä–µ–≤—å—é –∑–∞–∫–ª–∞–¥–∫–∏
function createBookmarkPreviewItem(bookmark, animeInfo) {
    const previewItem = document.createElement('div');
    previewItem.classList.add('preview-item');
    previewItem.style.position = 'relative';
    
    const metaInfo = animeInfo ? `
        <div class="preview-item-meta">
            <div>${animeInfo.seasons ? animeInfo.seasons[0].episodeCount || 'N/A' : 'N/A'} —Å–µ—Ä—ñ–π</div>
            <div>${animeInfo.status || 'N/A'}</div>
            <div>‚òÖ ${animeInfo.rating || 'N/A'}</div>
        </div>
    ` : `
        <div class="preview-item-meta">
            <div>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è...</div>
        </div>
    `;
    
    previewItem.innerHTML = `
        <img src="${bookmark.img}" alt="${bookmark.title}" class="preview-item-image">
        <div class="preview-item-info">
            <div class="preview-item-title">${bookmark.title}</div>
            ${metaInfo}
            <div class="preview-item-actions">
                <a href="anime-info.html?id=${bookmark.id}" class="preview-details-btn">–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ</a>
                <button class="preview-remove-btn" onclick="event.stopPropagation(); confirmRemoveBookmark('${bookmark.id}', '${bookmark.title.replace(/'/g, "\\'")}')">–í–∏–¥–∞–ª–∏—Ç–∏</button>
            </div>
        </div>
    `;
    
    previewItem.addEventListener('click', (e) => {
        if (!e.target.closest('.preview-item-actions')) {
            window.location.href = `anime-info.html?id=${bookmark.id}`;
        }
    });
    
    return previewItem;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞ –ø—Ä–µ–≤—å—é –æ—Ü—ñ–Ω–∫–∏
function createRatingPreviewItem(animeId, ratingData, animeInfo) {
    const previewItem = document.createElement('div');
    previewItem.classList.add('preview-item');
    previewItem.style.position = 'relative';
    
    const title = animeInfo ? animeInfo.title : `–ê–Ω—ñ–º–µ ID: ${animeId}`;
    const imageSrc = animeInfo ? animeInfo.img : 'data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="100" height="140" viewBox="0 0 100 140"><rect width="100" height="140" fill="%23943a67"/><text x="50" y="70" font-family="Arial" font-size="14" fill="white" text-anchor="middle">‚≠ê</text></svg>';
    
    const stars = '‚òÖ'.repeat(ratingData.rating) + '‚òÜ'.repeat(10 - ratingData.rating);
    
    previewItem.innerHTML = `
        <button class="preview-rating-remove" onclick="event.stopPropagation(); confirmDeleteRating('${animeId}', '${title.replace(/'/g, "\\'")}')">–í–∏–¥–∞–ª–∏—Ç–∏</button>
        <img src="${imageSrc}" alt="${title}" class="preview-item-image">
        <div class="preview-item-info">
            <div class="preview-item-title">${title}</div>
            <div class="preview-item-meta">
                <div style="color: #ffd700;">${stars}</div>
                <div>${ratingData.rating}/10</div>
            </div>
            <div class="preview-item-actions">
                <a href="anime-info.html?id=${animeId}" class="preview-details-btn">–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ</a>
            </div>
        </div>
    `;
    
    previewItem.addEventListener('click', (e) => {
        if (!e.target.closest('.preview-rating-remove') && !e.target.closest('.preview-item-actions')) {
            window.location.href = `anime-info.html?id=${animeId}`;
        }
    });
    
    return previewItem;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∞–Ω—ñ–º–µ
async function loadAnimeInfo(animeId) {
    try {
        const response = await fetch(`anime/${encodeURIComponent(animeId)}.json`);
        if (!response.ok) {
            throw new Error('–ê–Ω—ñ–º–µ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        }
        return await response.json();
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–Ω—ñ–º–µ:', error);
        return null;
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –∑ —É—Å—ñ–º–∞ –∑–∞–∫–ª–∞–¥–∫–∞–º–∏
async function showBookmarksModal() {
    const modalHTML = `
        <div class="profile-modal" id="bookmarks-modal">
            <div class="profile-modal-content">
                <div class="profile-modal-header">
                    <h3 class="profile-modal-title">–ú–æ—ó –∑–∞–∫–ª–∞–¥–∫–∏ (${allBookmarks.length})</h3>
                    <button class="profile-modal-close">&times;</button>
                </div>
                <div class="profile-modal-list" id="bookmarks-modal-list">
                    <!-- –¢—É—Ç –±—É–¥—É—Ç—å –≤—Å—ñ –∑–∞–∫–ª–∞–¥–∫–∏ -->
                </div>
            </div>
        </div>
    `;
    
    document.body.insertAdjacentHTML('beforeend', modalHTML);
    const modal = document.getElementById('bookmarks-modal');
    const closeBtn = modal.querySelector('.profile-modal-close');
    const listContainer = document.getElementById('bookmarks-modal-list');
    
    // –ó–∞–ø–æ–≤–Ω—é—î–º–æ —Å–ø–∏—Å–æ–∫ –∑–∞–∫–ª–∞–¥–æ–∫
    for (const bookmark of allBookmarks) {
        try {
            const animeInfo = await loadAnimeInfo(bookmark.id);
            const bookmarkCard = document.createElement('a');
            bookmarkCard.classList.add('bookmark-card');
            bookmarkCard.href = `anime-info.html?id=${bookmark.id}`;
            
            const metaInfo = animeInfo ? `
                <div class="bookmark-card-meta">
                    <span>${animeInfo.seasons ? animeInfo.seasons[0].episodeCount || 'N/A' : 'N/A'} —Å–µ—Ä—ñ–π</span>
                    <span class="bookmark-card-status">${animeInfo.status || 'N/A'}</span>
                    <span>‚òÖ ${animeInfo.rating || 'N/A'}</span>
                </div>
            ` : `
                <div class="bookmark-card-meta">
                    <span>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è...</span>
                </div>
            `;
            
            bookmarkCard.innerHTML = `
                <img src="${bookmark.img}" alt="${bookmark.title}" class="bookmark-card-image">
                <div class="bookmark-card-info">
                    <div class="bookmark-card-title">${bookmark.title}</div>
                    ${metaInfo}
                    <div class="bookmark-card-actions">
                        <a href="anime-info.html?id=${bookmark.id}" class="details-btn">–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ</a>
                        <button class="remove-btn" onclick="event.preventDefault(); confirmRemoveBookmark('${bookmark.id}', '${bookmark.title.replace(/'/g, "\\'")}')">–í–∏–¥–∞–ª–∏—Ç–∏</button>
                    </div>
                </div>
            `;
            listContainer.appendChild(bookmarkCard);
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∞–Ω—ñ–º–µ:', error);
        }
    }
    
    // –ü–æ–∫–∞–∑—É—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
    modal.style.display = 'flex';
    
    // –û–±—Ä–æ–±–Ω–∏–∫–∏ –∑–∞–∫—Ä–∏—Ç—Ç—è
    closeBtn.addEventListener('click', () => modal.remove());
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            modal.remove();
        }
    });
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –∑ —É—Å—ñ–º–∞ –æ—Ü—ñ–Ω–∫–∞–º–∏
async function showRatingsModal() {
    const modalHTML = `
        <div class="profile-modal" id="ratings-modal">
            <div class="profile-modal-content">
                <div class="profile-modal-header">
                    <h3 class="profile-modal-title">–ú–æ—ó –æ—Ü—ñ–Ω–∫–∏ (${Object.keys(allRatings).length})</h3>
                    <button class="profile-modal-close">&times;</button>
                </div>
                <div class="profile-modal-list" id="ratings-modal-list">
                    <!-- –¢—É—Ç –±—É–¥—É—Ç—å –≤—Å—ñ –æ—Ü—ñ–Ω–∫–∏ -->
                </div>
            </div>
        </div>
    `;
    
    document.body.insertAdjacentHTML('beforeend', modalHTML);
    const modal = document.getElementById('ratings-modal');
    const closeBtn = modal.querySelector('.profile-modal-close');
    const listContainer = document.getElementById('ratings-modal-list');
    
    // –ó–∞–ø–æ–≤–Ω—é—î–º–æ —Å–ø–∏—Å–æ–∫ –æ—Ü—ñ–Ω–æ–∫
    for (const [animeId, ratingData] of Object.entries(allRatings)) {
        try {
            const animeInfo = await loadAnimeInfo(animeId);
            const title = animeInfo ? animeInfo.title : `–ê–Ω—ñ–º–µ ID: ${animeId}`;
            const imageSrc = animeInfo ? animeInfo.img : 'data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="100" height="140" viewBox="0 0 100 140"><rect width="100" height="140" fill="%23943a67"/><text x="50" y="70" font-family="Arial" font-size="14" fill="white" text-anchor="middle">‚≠ê</text></svg>';
            
            const ratingCard = document.createElement('div');
            ratingCard.classList.add('rating-card');
            ratingCard.innerHTML = `
                <img src="${imageSrc}" alt="${title}" class="rating-card-image">
                <div class="rating-card-info">
                    <div class="rating-card-title">${title}</div>
                    <div class="rating-card-stars">${'‚òÖ'.repeat(ratingData.rating)}${'‚òÜ'.repeat(10 - ratingData.rating)}</div>
                    <div class="rating-card-date">–û—Ü—ñ–Ω–µ–Ω–æ: ${new Date(ratingData.date).toLocaleDateString('uk-UA')}</div>
                </div>
                <div class="rating-card-actions">
                    <button class="delete-rating-btn" onclick="confirmDeleteRating('${animeId}', '${title.replace(/'/g, "\\'")}')">√ó</button>
                </div>
            `;
            
            ratingCard.addEventListener('click', (e) => {
                if (!e.target.closest('.delete-rating-btn')) {
                    window.location.href = `anime-info.html?id=${animeId}`;
                }
            });
            
            listContainer.appendChild(ratingCard);
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∞–Ω—ñ–º–µ:', error);
        }
    }
    
    // –ü–æ–∫–∞–∑—É—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
    modal.style.display = 'flex';
    
    // –û–±—Ä–æ–±–Ω–∏–∫–∏ –∑–∞–∫—Ä–∏—Ç—Ç—è
    closeBtn.addEventListener('click', () => modal.remove());
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            modal.remove();
        }
    });
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–∫–ª–∞–¥–∫–∏
function confirmRemoveBookmark(animeId, title) {
    const modalHTML = `
        <div class="confirmation-modal" id="confirm-bookmark-remove">
            <div class="confirmation-modal-content">
                <h3>–í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–∫–ª–∞–¥–∫—É?</h3>
                <p>–í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ "${title}" –∑ –∑–∞–∫–ª–∞–¥–æ–∫?</p>
                <div class="confirmation-modal-buttons">
                    <button class="confirm-btn" onclick="executeRemoveBookmark('${animeId}')">–¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏</button>
                    <button class="cancel-btn" onclick="closeConfirmationModal('confirm-bookmark-remove')">–°–∫–∞—Å—É–≤–∞—Ç–∏</button>
                </div>
            </div>
        </div>
    `;
    
    document.body.insertAdjacentHTML('beforeend', modalHTML);
    const modal = document.getElementById('confirm-bookmark-remove');
    modal.style.display = 'flex';
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –æ—Ü—ñ–Ω–∫–∏
function confirmDeleteRating(animeId, title) {
    const modalHTML = `
        <div class="confirmation-modal" id="confirm-rating-delete">
            <div class="confirmation-modal-content">
                <h3>–í–∏–¥–∞–ª–∏—Ç–∏ –æ—Ü—ñ–Ω–∫—É?</h3>
                <p>–í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –≤–∞—à—É –æ—Ü—ñ–Ω–∫—É –¥–ª—è "${title}"?</p>
                <div class="confirmation-modal-buttons">
                    <button class="confirm-btn" onclick="executeDeleteRating('${animeId}')">–¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏</button>
                    <button class="cancel-btn" onclick="closeConfirmationModal('confirm-rating-delete')">–°–∫–∞—Å—É–≤–∞—Ç–∏</button>
                </div>
            </div>
        </div>
    `;
    
    document.body.insertAdjacentHTML('beforeend', modalHTML);
    const modal = document.getElementById('confirm-rating-delete');
    modal.style.display = 'flex';
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–∫–ª–∞–¥–∫–∏ (–±–µ–∑ –∑–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞)
function executeRemoveBookmark(animeId) {
    allBookmarks = allBookmarks.filter(item => item.id !== animeId);
    localStorage.setItem('animeBookmarks', JSON.stringify(allBookmarks));
    
    // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    closeConfirmationModal('confirm-bookmark-remove');
    
    // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    updateProfileStats();
    showTempMessage('–ó–∞–∫–ª–∞–¥–∫—É –≤–∏–¥–∞–ª–µ–Ω–æ üìï');
    
    // –û–Ω–æ–≤–ª—é—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –∑ –∑–∞–∫–ª–∞–¥–∫–∞–º–∏ —è–∫—â–æ –≤–æ–Ω–æ –≤—ñ–¥–∫—Ä–∏—Ç–µ
    const bookmarksModal = document.getElementById('bookmarks-modal');
    if (bookmarksModal) {
        // –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–µ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
        bookmarksModal.remove();
        // –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –Ω–æ–≤–µ –∑ –æ–Ω–æ–≤–ª–µ–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
        showBookmarksModal();
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –æ—Ü—ñ–Ω–∫–∏ (–±–µ–∑ –∑–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞)
function executeDeleteRating(animeId) {
    delete allRatings[animeId];
    localStorage.setItem('animeRatings', JSON.stringify(allRatings));
    
    // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    closeConfirmationModal('confirm-rating-delete');
    
    // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    updateProfileStats();
    showTempMessage('–û—Ü—ñ–Ω–∫—É –≤–∏–¥–∞–ª–µ–Ω–æ ‚≠ê');
    
    // –û–Ω–æ–≤–ª—é—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –∑ –æ—Ü—ñ–Ω–∫–∞–º–∏ —è–∫—â–æ –≤–æ–Ω–æ –≤—ñ–¥–∫—Ä–∏—Ç–µ
    const ratingsModal = document.getElementById('ratings-modal');
    if (ratingsModal) {
        // –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–µ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
        ratingsModal.remove();
        // –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –Ω–æ–≤–µ –∑ –æ–Ω–æ–≤–ª–µ–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
        showRatingsModal();
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
function closeConfirmationModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
        modal.remove();
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É —Ç–∏–º—á–∞—Å–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
function showTempMessage(message) {
    // –°—Ç–≤–æ—Ä—é—î–º–æ –µ–ª–µ–º–µ–Ω—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    const messageEl = document.createElement('div');
    messageEl.textContent = message;
    messageEl.classList.add('temp-message');
    
    document.body.appendChild(messageEl);
    
    // –ê–Ω—ñ–º–∞—Ü—ñ—è –ø–æ—è–≤–∏ - –ø–ª–∞–≤–Ω–æ –∑'—è–≤–ª—è—î—Ç—å—Å—è –∑–∞ 0.5 —Å–µ–∫—É–Ω–¥–∏
    setTimeout(() => {
        messageEl.classList.add('show');
    }, 10);
    
    // –ê–Ω—ñ–º–∞—Ü—ñ—è –∑–Ω–∏–∫–Ω–µ–Ω–Ω—è - –ø–ª–∞–≤–Ω–æ –∑–Ω–∏–∫–∞—î —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥–∏
    setTimeout(() => {
        messageEl.classList.remove('show');
        
        // –í–∏–¥–∞–ª—è—î–º–æ –µ–ª–µ–º–µ–Ω—Ç –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∞–Ω—ñ–º–∞—Ü—ñ—ó
        setTimeout(() => {
            if (document.body.contains(messageEl)) {
                document.body.removeChild(messageEl);
            }
        }, 500);
    }, 2000);
}